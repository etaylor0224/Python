import datetime
import time

import synology_dsm as synology
import configparser

config = configparser.ConfigParser()
config_file = config.read("synology-api-config.ini")

dsm = synology.SynologyDSM(
    config['authentication']['server_ip'],
    5001,
    config['authentication']['username'],
    config['authentication']['password'],
    use_https=True,
    verify_ssl=False,
)

def check_login():
    if dsm.login():
        return True
    else:
        return False

def system_information():
    print("Gathering System Information\n")
    dsm.information.update()
    model_inf = dsm.information.model
    dev_temp = dsm.information.temperature
    uptime = dsm.information.uptime
    return dev_temp, uptime

def system_utilization():
    print("Gathering Utilization Information")
    dsm.utilisation.update()
    cpu_load = dsm.utilisation.cpu_total_load
    ram_use = dsm.utilisation.memory_real_usage
    return cpu_load, ram_use

def storage_usage():
    print("Gathering Storage Utilization")
    dsm.storage.update()
    for volume in dsm.storage.volumes_ids:
        vol_stat = dsm.storage.volume_status(volume)
        vol_perc = dsm.storage.volume_percentage_used(volume)

    return volume, vol_stat, vol_perc


def disk_info():
    print("Gathering Disk Information")
    disk_dict = {}
    for disk in dsm.storage.disks_ids:
        disk_id = dsm.storage.disk_name(disk)
        disk_status = dsm.storage.disk_status(disk)
        disk_smart = dsm.storage.disk_smart_status(disk)
        disk_temp = dsm.storage.disk_temp(disk)
        print(f"Disk ID: {disk_id}")
        print(f"Disk Status: {disk_status}")
        print(f"Disk SMART Status: {disk_smart}")
        print(f"Disk Temp: {disk_temp}\n")
        disk_dict.update({disk: (disk_id,disk_status,disk_smart,disk_temp)})
    return disk_dict

def upgrade_check():
    print("Checking for DSM Updates")
    dms_upgrade = dsm.upgrade
    dms_upgrade.update()
    upgrade = dms_upgrade.update_available
    if dms_upgrade.update_available:
        print(f"Update Available\nPlease Upgrade DSM Version to {dms_upgrade.available_version}\n")
        return upgrade
    else:
        print("No Updates Available at this time.")
        return upgrade

def available_api():
    for apis in dsm.apis:
        print(f"Available APIs are: {apis}")

def logger(dev_inf, sys_util, vol_stat, disk, upgrade):
    date = datetime.date.today()
    timestamp = datetime.datetime.now()
    disk_data = ""
    for id in disk:
        disks = disk[id]
        for data in disks:
            disk_data += f"{str(data)}\n"

    log_txt = (f"Timestamp: {timestamp}\n\n"
               f"Temerature: {dev_inf[0]} C\n"
               f"Uptime: {dev_inf[1]} seconds\n\n"
               f"CPU Total Load: {sys_util[0]}%\n"
               f"RAM Usage: {sys_util[1]}%\n\n"
               f"Volume ID: {vol_stat[0]}\n"
               f"Status: {vol_stat[1]}\n"
               f"Used: {vol_stat[2]}%\n\n"
               f"Upgrade available: {upgrade}\n")
    with open(f"syn-logger-{date}.txt", "a") as log:
        log.write(log_txt)

def run_tasks():
    if check_login():
        print("Logged In")
        sys_inf = system_information()
        sys_util = system_utilization()
        vol = storage_usage()
        disk = disk_info()
        upgrade = upgrade_check()
        logger(sys_inf, sys_util, vol, disk,upgrade)
        #available_api()
    else:
        print("Error with Login credentials")


if __name__ == "__main__":
    run_tasks()
    # while True:
    #     run_tasks()
    #     if dsm.logout():
    #         print("Logged Out")
    #         print("Next run in 1 hour")
    #         time.sleep(30)
    #     else:
    #         break
